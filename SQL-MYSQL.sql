CREATE DATABASE college;
CREATE DATABASE IF NOT EXISTS college;

CREATE DATABASE temp1;
CREATE DATABASE temp2;
DROP DATABASE temp1;
DROP DATABASE temp2;

USE college;
CREATE TABLE student
(
	id INT PRIMARY KEY,
    name VARCHAR(50),
    age INT NOT NULL
);

INSERT INTO STUDENT VALUES(1,'Aman',26);
INSERT INTO STUDENT VALUES(2,'Shardhha',24);

SELECT * FROM student;

USE college;
DROP TABLE student;
DROP DATABASE IF EXISTS college;

CREATE DATABASE college;
SHOW DATABASES;
USE college;
SHOW TABLES;

CREATE TABLE student
(
	rollno INT PRIMARY KEY,
    name VARCHAR(50)
);

INSERT INTO student
( rollno,name)
VALUES
(101,'Karan'),
(102,'Arjun'),
(103,'Ram');

SELECT * FROM student;

INSERT INTO student VALUES(104,'Shyam');
SELECT * FROM student;

-- Practice question
CREATE DATABASE IF NOT EXISTS XYZ;
USE XYZ;

CREATE TABLE employee 
(
 id INT PRIMARY KEY,
 name VARCHAR(50),
 salary INT 
 );
 

 
INSERT INTO employee VALUES 
(1,'adam',25000),
(2,'bob',30000),
(3,'casey',40000);

SELECT * FROM employee;
DESC employee;

DROP DATABASE college;

CREATE DATABASE college;

USE college;

CREATE TABLE student
(
rollno INT PRIMARY KEY,
name VARCHAR(50),
marks INT NOT NULL,
grade VARCHAR(1),
city VARCHAR(20)
);

INSERT INTO STUDENT
(rollno,name,marks,grade,city)
VALUES
(101,'anil',78,'C','Pune'),
(102,'bhumika',93,'A','Mumbai'),
(103,'chetan',85,'B','Mumbai'),
(104,'dhruv',96,'A','Delhi'),
(105,'emanuel',12,'F','Delhi'),
(106,'farah',82,'B','Delhi');


SELECT * FROM STUDENT;

SELECT  *
FROM student
WHERE marks>80;

SELECT * FROM STUDENT
WHERE 
CITY = 'Mumbai';

-- Opeartors 

SELECT * FROM STUDENT 
WHERE 
MARKS = 93;

SELECT * FROM STUDENT
WHERE 
MARKS >=80;

SELECT * FROM STUDENT 
WHERE 
MARKS>=90 AND CITY = 'Mumbai';

SELECT * FROM STUDENT 
WHERE 
MARKS>=90 OR CITY = 'Mumbai';

SELECT * FROM STUDENT
WHERE 
MARKS BETWEEN 60 AND 90;

SELECT * FROM STUDENT 
WHERE 
CITY IN('Pune','Mumbai');

SELECT * FROM STUDENT 
WHERE 
CITY NOT IN ('Pune','Mumbai');

SELECT * FROM STUDENT
LIMIT 3;

SELECT * FROM STUDENT
WHERE 
MARKS >= 90
LIMIT 0,1;

SELECT * FROM STUDENT 
ORDER BY MARKS DESC
LIMIT 1;

SELECT * FROM student;
SELECT COUNT(NAME) FROM STUDENT;
SELECT COUNT(*) FROM STUDENT;

SELECT MAX(MARKS) FROM STUDENT;
SELECT MIN(MARKS) FROM STUDENT;
SELECT SUM(MARKS) FROM STUDENT;
SELECT AVG(MARKS) FROM STUDENT;

-- GROUP BY CLAUSE
SELECT CITY FROM STUDENT GROUP BY CITY;
SELECT CITY,NAME FROM STUDENT GROUP BY CITY,NAME;
SELECT CITY,NAME, AVG(MARKS) FROM STUDENT GROUP BY CITY,NAME;

-- Practice set
SELECT CITY,AVG(MARKS) AS AVG_MARKS FROM STUDENT GROUP BY CITY ORDER BY AVG_MARKS ASC;
SELECT COUNT(*) ,MODE FROM CUSTOMER GROUP BY MODE;

SELECT COUNT(NAME),GRADE FROM STUDENT GROUP BY GRADE;
SELECT COUNT(GRADE),GRADE FROM STUDENT GROUP BY GRADE;

SELECT CITY
FROM STUDENT 
WHERE GRADE = 'A'
GROUP BY CITY 
HAVING MAX(MARKS)>=93
ORDER BY CITY ASC;

SET SQL_SAFE_UPDATES = 0;
SELECT * FROM STUDENT;
UPDATE STUDENT SET MARKS = 80 WHERE ROLLNO = 105;
UPDATE STUDENT SET GRADE = 'B' WHERE MARKS BETWEEN 80 AND 90;
UPDATE STUDENT SET GRADE = 'O' WHERE GRADE = 'A';
UPDATE STUDENT SET MARKS = MARKS + 1;
SELECT * FROM STUDENT;

UPDATE STUDENT SET MARKS = 12 WHERE ROLLNO = 105;
SELECT * FROM STUDENT;

DELETE FROM STUDENT WHERE MARKS <=33;
DELETE FROM STUDENT;

-- Foreign key 

SHOW DATABASES;
USE college;

CREATE TABLE DEPT 
(
	id INT PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE TEACHER
(
	id INT PRIMARY KEY,
    name VARCHAR(50),
    dept_id INT,
    FOREIGN KEY(dept_id) REFERENCES DEPT(id)
    ON UPDATE CASCADE
    ON DELETE CASCADE
);

INSERT INTO DEPT 
VALUES
(101,'English'),
(102,'IT');
SELECT * FROM DEPT;

INSERT INTO TEACHER
VALUES
(101,'Adam',101),
(102,'Eve',102);
SELECT * FROM TEACHER;

UPDATE DEPT SET id = 111 WHERE id = 101;
SELECT * FROM DEPT;
SELECT * FROM TEACHER;

UPDATE DEPT SET id = 112 WHERE id = 102;
SELECT * FROM DEPT;
SELECT * FROM TEACHER;

-- ALTER COMMANDS 

-- ADD COLUMNS 
ALTER TABLE STUDENT ADD COLUMN age INT NOT NULL DEFAULT 19;
SELECT * FROM STUDENT;

-- MODIFY DATATYPE ND SIZE
ALTER TABLE STUDENT MODIFY age VARCHAR(2);
ALTER TABLE STUDENT MODIFY stu_age INT;

-- RENAME A COLUMN
ALTER TABLE STUDENT CHANGE age stu_age INT;
ALTER TABLE STUDENT CHANGE stu_age age VARCHAR(2);
ALTER TABLE STUDENT CHANGE age stu_age INT;

-- DROP COLUMN
ALTER TABLE STUDENT DROP COLUMN stu_age;

-- RENAME TABLE 
ALTER TABLE STUDENT RENAME TO STU;
ALTER TABLE STU RENAME TO STUDENT;

-- TRUNCATE 
TRUNCATE TABLE STUDENT;
SELECT * FROM STUDENT;

-- Practice questions 

ALTER TABLE STUDENT 
CHANGE name full_name VARCHAR(50);
SELECT * FROM STUDENT;

DELETE FROM student 
WHERE marks < 80;
SELECT * FROM STUDENT;

ALTER TABLE STUDENT 
DROP COLUMN GRADE;

SELECT * FROM STUDENT;

-- JOINS 

USE college;
SELECT * FROM STUDENT;
DROP TABLE STUDENT;

CREATE TABLE STUDENT
(
	id INT PRIMARY KEY,
	name  VARCHAR(20)
);

INSERT INTO STUDENT
VALUES
(101,'adam'),
(102,'bob'),
(103,'casey');

SELECT * FROM STUDENT;

CREATE TABLE course 
(
	cid INT PRIMARY KEY,
    course VARCHAR(30)
);

INSERT INTO course
VALUES
(102,'english'),
(105,'math'),
(103,'science'),
(104,'computer science');

SELECT * FROM course;
-- INNER JOIN
SELECT * 
FROM STUDENT 
INNER JOIN COURSE 
ON  STUDENT.ID = COURSE.CID;


SELECT * 
FROM STUDENT AS S
INNER JOIN COURSE AS C 
ON S.ID = C.CID;

SELECT * FROM STUDENT;
SELECT * FROM COURSE;

-- LEFT JOIN
SELECT *
FROM STUDENT AS S 
LEFT JOIN COURSE AS C 
ON S.ID = C.CID;

-- RIGHT JOIN
SELECT * 
FROM STUDENT S 
RIGHT JOIN COURSE C 
ON S.ID = C.CID;

-- FULL JOIN

SELECT * 
FROM STUDENT S 
LEFT JOIN COURSE C 
ON S.ID = C.CID
UNION
SELECT *
FROM STUDENT S 
RIGHT JOIN COURSE C 
ON S.ID = C.CID;

-- LEFT EXCLUSIVE JOIN 

SELECT *
FROM STUDENT S 
LEFT JOIN COURSE C 
ON S.ID = C.CID
WHERE C.CID IS NULL;

-- RIGHT EXCLUSIVE JOIN 

SELECT *
FROM STUDENT S
RIGHT JOIN COURSE C 
ON S.ID = C.CID
WHERE S.ID IS NULL;

-- FULL EXCLUSIVE JOIN

SELECT *
FROM STUDENT S 
LEFT JOIN COURSE C 
ON S.ID = C.CID
WHERE C.CID IS NULL
UNION
SELECT *
FROM STUDENT S
RIGHT JOIN COURSE C 
ON S.ID = C.CID
WHERE S.ID IS NULL;

-- SELF JOIN 

CREATE TABLE employee
( 
	id INT PRIMARY KEY,
    name VARCHAR(20),
    manager_id INT
);

INSERT INTO employee (id,name,manager_id)
VALUES
(101,'adam',103),
(102,'bob',104),
(103,'casey',NULL),
(104,'donald',103);

SELECT * FROM employee;

SELECT a.name AS manager_name,b.name
FROM employee AS a
JOIN employee AS b
ON a.id = b.manager_id;

-- UNION 
SELECT * FROM employee
UNION
SELECT * FROM employee;

-- UNION ALL
SELECT * FROM employee
UNION ALL
SELECT * FROM employee;

-- SUB QUERIES 

DROP TABLE student;

SELECT AVG(MARKS)
FROM student;

SELECT name,marks FROM student;

SELECT name,marks FROM student 
WHERE 
marks > (SELECT AVG(marks) FROM student);

SELECT rollno FROM STUDENT where rollno % 2 = 0;

SELECT name ,rollno FROM student
WHERE 
rollno  IN (SELECT  rollno FROM STUDENT where rollno % 2 = 0);

-- SUB QUERY USING FROM 

SELECT * FROM student WHERE city = 'Delhi';

SELECT max(marks)
FROM(SELECT * FROM student WHERE city = 'delhi') AS temp;

-- SUB QUERY USING SELECT

SELECT(SELECT MAX(marks) FROM student),name
FROM student;


-- VIEWs

CREATE VIEW view1 AS 
SELECT rollno,name FROM student;

SELECT * FROM view1;







    














